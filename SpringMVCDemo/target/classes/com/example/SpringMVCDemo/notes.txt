*   For different reqs we have different controllers. To navigate to diff controllers we have "Front Controller". So in between client and 
    diff controllers sits a FC, who then redirects to diff reqs. This FC is called "Dispatcher Servlet". 

*   Whenever spring is ran, spring always calls "web.xml" file where we need to mention two tags : 1. servlet 2. servlet-mapping.
    Inside servlet-mapping mention the url pattern and in servlet mention the servlet name then link both of them using sn.
    
*   Running spring project without springboot:
    
    1. Create the controller class and using annotation to mention the modelAttribute, requestMapping and other stuffs.
    2. To make your controller work, inform tomcat that you are working with spring mvc project and to do that inside web.xml mention the
    	first servlet that tomcat needs to interact with is the dispatcher servlet which is given by the spring framework. In this project,
    	all the requests "/" tc needs to call the dispatcher servlet. {web.xml file is used to talk to tomcat}.
    3. So inside web.xml we are establishing communication with tomcat, now to interact with dispatcher servlet(step 2) we use dispatcher
       servlet named xml file(eg. Web_app-servlet.xml) which is in WEB-INF(/SpringMVCDemo/src/main/webapp/WEB-INF) folder. So far ds is 
       unaware that we are using the controller for execution. So inside it need to mention that we are using annotations 
        <ctx:annotation-config/> and mention the package 
        <$ ctx:component-scan base-package="com.example"/>.
    4. Then dispatcher servlet goes into the controller class and it is unaware where the requested "index" page is. So user needs to
    	mention the index path and the extension name. So this can be done using "Internal Resource View Resolver" inside this tag mention
    	the prefix and the suffix :
	    	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver.class">
	    		<property name="prefix" value="/views"></property>
	    		<property name="suffix" value=".jsp"></property>
	    	</bean>
	    	
	  These all configuration is done only once further as the project evolves so does the configs.  	